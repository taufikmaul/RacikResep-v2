// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Business profile
  business Business?

  // Activity logs
  activities ActivityLog[]

  @@map("users")
}

model Business {
  id          String  @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  logo        String?
  currency    String  @default("IDR")
  language    String  @default("id")
  theme       String  @default("light")
  accentColor String  @default("blue")
  
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Related data
  ingredients     Ingredient[]
  recipes         Recipe[]
  categories      Category[]
  units           Unit[]
  salesChannels   SalesChannel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("businesses")
}

model Category {
  id          String @id @default(cuid())
  name        String
  type        String // "ingredient" or "recipe"
  color       String @default("#6B7280")
  
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Relations
  ingredients Ingredient[]
  recipes     Recipe[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Unit {
  id          String @id @default(cuid())
  name        String
  symbol      String
  type        String // "purchase" or "usage"
  
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Relations
  ingredientsPurchase Ingredient[] @relation("PurchaseUnit")
  ingredientsUsage    Ingredient[] @relation("UsageUnit")
  recipeIngredients   RecipeIngredient[]
  recipeYields        Recipe[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("units")
}

model Ingredient {
  id              String  @id @default(cuid())
  name            String
  description     String?
  purchasePrice   Float
  packageSize     Float
  conversionFactor Float  @default(1) // Factor to convert purchase unit to usage unit
  costPerUnit     Float // Auto-calculated: purchasePrice / conversionFactor
  
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  
  purchaseUnitId  String
  purchaseUnit    Unit @relation("PurchaseUnit", fields: [purchaseUnitId], references: [id])
  
  usageUnitId     String
  usageUnit       Unit @relation("UsageUnit", fields: [usageUnitId], references: [id])
  
  businessId      String
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Relations
  recipeIngredients RecipeIngredient[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredients")
}

model Recipe {
  id              String  @id @default(cuid())
  name            String
  description     String?
  instructions    String?
  imageUrl        String?
  yield           Float   @default(1) // Yield amount
  yieldUnitId     String? // Unit for yield
  yieldUnit       Unit?   @relation(fields: [yieldUnitId], references: [id])
  laborCost       Float   @default(0)
  operationalCost Float   @default(0)
  packagingCost   Float   @default(0)
  totalCOGS       Float   @default(0) // Auto-calculated
  cogsPerServing  Float   @default(0) // Auto-calculated
  basePrice       Float   @default(0)
  profitMargin    Float   @default(0) // Percentage
  marginType      String  @default("percentage") // "percentage" or "amount"
  sellingPrice    Float   @default(0) // Auto-calculated
  taxRate         Float   @default(0) // Percentage
  canBeUsedAsIngredient Boolean @default(false) // Can this recipe be used in other recipes
  costPerUnit     Float   @default(0) // Cost per yield unit when used as ingredient
  
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  
  businessId      String
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Relations
  ingredients     RecipeIngredient[]
  subRecipes      RecipeSubRecipe[] @relation("ParentRecipe")
  parentRecipes   RecipeSubRecipe[] @relation("SubRecipe")
  channelPrices   ChannelPrice[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipes")
}

model RecipeIngredient {
  id           String @id @default(cuid())
  quantity     Float
  cost         Float  @default(0) // Auto-calculated
  
  recipeId     String
  recipe       Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  unitId       String
  unit         Unit @relation(fields: [unitId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe_ingredients")
}

model RecipeSubRecipe {
  id            String @id @default(cuid())
  quantity      Float  @default(1)
  cost          Float  @default(0) // Auto-calculated
  
  parentRecipeId String
  parentRecipe   Recipe @relation("ParentRecipe", fields: [parentRecipeId], references: [id], onDelete: Cascade)
  
  subRecipeId    String
  subRecipe      Recipe @relation("SubRecipe", fields: [subRecipeId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe_sub_recipes")
}

model SalesChannel {
  id          String @id @default(cuid())
  name        String
  commission  Float  @default(0) // Percentage
  
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Relations
  channelPrices ChannelPrice[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sales_channels")
}

model ChannelPrice {
  id            String @id @default(cuid())
  price         Float
  finalPrice    Float  @default(0) // After commission
  
  recipeId      String
  recipe        Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  channelId     String
  channel       SalesChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, channelId])
  @@map("channel_prices")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  description String
  entityType  String?  // "ingredient", "recipe", etc.
  entityId    String?
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("activity_logs")
}
