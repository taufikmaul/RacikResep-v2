generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activities   ActivityLog[]
  business     Business?
  subscription Subscription?

  @@map("users")
}

model Business {
  id                  String                   @id @default(cuid())
  name                String
  address             String?
  phone               String?
  email               String?
  logo                String?
  currency            String                   @default("IDR")
  language            String                   @default("id")
  theme               String                   @default("light")
  userId              String                   @unique
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories          Category[]
  channelPriceHistory ChannelPriceHistory[]
  decimalSettings     DecimalSettings?         @relation("BusinessDecimalSettings")
  priceHistory        IngredientPriceHistory[]
  ingredients         Ingredient[]
  recipePriceHistory  RecipePriceHistory[]
  recipes             Recipe[]
  salesChannels       SalesChannel[]
  skuSettings         SkuSettings?             @relation("BusinessSkuSettings")
  units               Unit[]

  @@map("businesses")
}

model Category {
  id          String       @id @default(cuid())
  name        String
  type        String
  color       String       @default("#6B7280")
  businessId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  business    Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  recipes     Recipe[]

  @@index([businessId])
  @@index([businessId, type])
  @@map("categories")
}

model Unit {
  id                  String             @id @default(cuid())
  name                String
  symbol              String
  type                String
  businessId          String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  ingredientsUsage    Ingredient[]       @relation("UsageUnit")
  ingredientsPurchase Ingredient[]       @relation("PurchaseUnit")
  recipeIngredients   RecipeIngredient[]
  recipeYields        Recipe[]
  business            Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([businessId, type])
  @@map("units")
}

model Ingredient {
  id                String                   @id @default(cuid())
  sku               String?                  @unique
  name              String
  description       String?
  purchasePrice     Float
  packageSize       Float
  conversionFactor  Float                    @default(1)
  costPerUnit       Float
  categoryId        String?
  purchaseUnitId    String
  usageUnitId       String
  businessId        String
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  priceHistory      IngredientPriceHistory[]
  business          Business                 @relation(fields: [businessId], references: [id], onDelete: Cascade)
  usageUnit         Unit                     @relation("UsageUnit", fields: [usageUnitId], references: [id])
  purchaseUnit      Unit                     @relation("PurchaseUnit", fields: [purchaseUnitId], references: [id])
  category          Category?                @relation(fields: [categoryId], references: [id])
  recipeIngredients RecipeIngredient[]

  @@index([businessId])
  @@index([businessId, categoryId])
  @@index([businessId, createdAt])
  @@index([businessId, costPerUnit])
  @@map("ingredients")
}

model IngredientPriceHistory {
  id               String     @id @default(cuid())
  ingredientId     String
  oldPrice         Float
  newPrice         Float
  priceChange      Float
  percentageChange Float
  changeType       String
  changeDate       DateTime   @default(now())
  businessId       String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  business         Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([ingredientId, changeDate])
  @@index([businessId, changeDate])
  @@map("ingredient_price_history")
}

model Recipe {
  id                    String               @id @default(cuid())
  sku                   String?              @unique
  name                  String
  description           String?
  instructions          String?
  imageUrl              String?
  yield                 Float                @default(1)
  yieldUnitId           String?
  laborCost             Float                @default(0)
  operationalCost       Float                @default(0)
  packagingCost         Float                @default(0)
  totalCOGS             Float                @default(0)
  cogsPerServing        Float                @default(0)
  basePrice             Float                @default(0)
  profitMargin          Float                @default(0)
  marginType            String               @default("percentage")
  sellingPrice          Float                @default(0)
  taxRate               Float                @default(0)
  canBeUsedAsIngredient Boolean              @default(false)
  costPerUnit           Float                @default(0)
  isFavorite            Boolean              @default(false)
  categoryId            String?
  businessId            String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  channelPrices         ChannelPrice[]
  ingredients           RecipeIngredient[]
  priceHistory          RecipePriceHistory[]
  parentRecipes         RecipeSubRecipe[]    @relation("SubRecipe")
  subRecipes            RecipeSubRecipe[]    @relation("ParentRecipe")
  yieldUnit             Unit?                @relation(fields: [yieldUnitId], references: [id])
  category              Category?            @relation(fields: [categoryId], references: [id])
  business              Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([businessId, profitMargin])
  @@index([businessId, totalCOGS])
  @@index([businessId, createdAt])
  @@index([businessId, categoryId])
  @@index([businessId, isFavorite])
  @@index([businessId, canBeUsedAsIngredient])
  @@map("recipes")
}

model RecipePriceHistory {
  id               String   @id @default(cuid())
  recipeId         String
  oldPrice         Float
  newPrice         Float
  priceChange      Float
  percentageChange Float
  changeType       String
  changeDate       DateTime @default(now())
  reason           String?
  businessId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  business         Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  recipe           Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([recipeId, changeDate])
  @@index([businessId, changeDate])
  @@map("recipe_price_history")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  quantity     Float
  cost         Float      @default(0)
  recipeId     String
  ingredientId String
  unitId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  unit         Unit       @relation(fields: [unitId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([ingredientId])
  @@map("recipe_ingredients")
}

model RecipeSubRecipe {
  id             String   @id @default(cuid())
  quantity       Float    @default(1)
  cost           Float    @default(0)
  parentRecipeId String
  subRecipeId    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subRecipe      Recipe   @relation("SubRecipe", fields: [subRecipeId], references: [id], onDelete: Cascade)
  parentRecipe   Recipe   @relation("ParentRecipe", fields: [parentRecipeId], references: [id], onDelete: Cascade)

  @@map("recipe_sub_recipes")
}

model SalesChannel {
  id            String         @id @default(cuid())
  name          String
  commission    Float          @default(0)
  icon          String?        @default("other")
  businessId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  channelPrices ChannelPrice[]
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("sales_channels")
}

model ChannelPrice {
  id           String                @id @default(cuid())
  price        Float
  finalPrice   Float                 @default(0)
  commission   Float                 @default(0)
  taxRate      Float                 @default(0)
  recipeId     String
  channelId    String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  priceHistory ChannelPriceHistory[]
  recipe       Recipe                @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  channel      SalesChannel          @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([recipeId, channelId])
  @@index([recipeId])
  @@index([channelId])
  @@map("channel_prices")
}

model ChannelPriceHistory {
  id               String       @id @default(cuid())
  channelPriceId   String
  oldPrice         Float
  newPrice         Float
  priceChange      Float
  percentageChange Float
  changeType       String
  reason           String?
  changeDate       DateTime     @default(now())
  businessId       String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  business         Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  channelPrice     ChannelPrice @relation(fields: [channelPriceId], references: [id], onDelete: Cascade)

  @@map("channel_price_history")
}

model SkuSettings {
  id                   String   @id @default(cuid())
  businessId           String   @unique
  ingredientPrefix     String   @default("ING")
  recipePrefix         String   @default("RCP")
  numberPadding        Int      @default(3)
  separator            String   @default("")
  nextIngredientNumber Int      @default(1)
  nextRecipeNumber     Int      @default(1)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  business             Business @relation("BusinessSkuSettings", fields: [businessId], references: [id], onDelete: Cascade)

  @@map("sku_settings")
}

model DecimalSettings {
  id                String   @id @default(cuid())
  businessId        String   @unique
  decimalPlaces     Int      @default(2)
  roundingMethod    String   @default("round")
  thousandSeparator String   @default(",")
  decimalSeparator  String   @default(".")
  currencySymbol    String   @default("Rp")
  currencyPosition  String   @default("before")
  showTrailingZeros Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  business          Business @relation("BusinessDecimalSettings", fields: [businessId], references: [id], onDelete: Cascade)

  @@map("decimal_settings")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  description String
  entityType  String?
  entityId    String?
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  planId             String
  status             String    @default("trial")
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialStart         DateTime?
  trialEnd           DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  plan               Plan      @relation(fields: [planId], references: [id])
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Plan {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  price          Float
  currency       String         @default("IDR")
  interval       String         @default("month")
  features       String
  maxUsers       Int            @default(1)
  maxRecipes     Int            @default(100)
  maxIngredients Int            @default(500)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriptions  Subscription[]

  @@map("plans")
}
